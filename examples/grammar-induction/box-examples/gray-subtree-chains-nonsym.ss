(load "grammar-tools.ss")

(define data
  (list
    (gray (blue) (blue))
    (gray (blue) (blue (gray (blue))))
    (gray (red (gray (red))) (red ))
    (gray (red) (red ))
    ))

(define merge-history  (grammar->history '(program
  ((abstraction F20 ()
     (choose
       (elem "gray" (tr "l-forward" (F17))
         (tr "r-forward" (F17)))
       (elem "gray" (tr "l-forward" (F19))
         (tr "r-forward" (F19)))))
    (abstraction F19 ()
      (choose (elem "blue" (tr "forward" (F5)))
        (elem "blue")))
    (abstraction F17 ()
      (choose (elem "red" (tr "forward" (F9))) (elem "red")))
    (abstraction F5 () (elem "gray" (tr "forward" (F19))))
    (abstraction F9 () (elem "gray" (tr "forward" (F17)))))
  (lambda () (choose (F20)))
  ((-0.6931471805599453 -0.6931471805599453)
    (-0.6931471805599453 -0.6931471805599453)
    (-0.6931471805599453 -0.6931471805599453) (0.0) (0.0)
    (0.0))
  (stats (posterior -56.21353416444131)
    (likelihood+weight -8.213534164441317 1.0)
    (prior+weight -48.0 1.0) (desc-length 48)
    (dirichlet-prior 1.3322676295501878e-15))
  (merge-history
    (program
      ((abstraction F0 () (elem "blue"))
        (abstraction F2 ()
          (elem "gray" (tr "l-forward" (F0))
            (tr "r-forward" (F0))))
        (abstraction F5 () (elem "gray" (tr "forward" (F0))))
        (abstraction F6 () (elem "blue" (tr "forward" (F5))))
        (abstraction F7 ()
          (elem "gray" (tr "l-forward" (F0))
            (tr "r-forward" (F6))))
        (abstraction F8 () (elem "red"))
        (abstraction F9 () (elem "gray" (tr "forward" (F8))))
        (abstraction F10 () (elem "red" (tr "forward" (F9))))
        (abstraction F12 ()
          (elem "gray" (tr "l-forward" (F10))
            (tr "r-forward" (F8))))
        (abstraction F15 ()
          (elem "gray" (tr "l-forward" (F8))
            (tr "r-forward" (F8)))))
      (lambda () (choose (F2) (F7) (F12) (F15)))
      ((0.0) (0.0) (0.0) (0.0) (0.0) (0.0) (0.0) (0.0) (0.0)
        (0.0)
        (-1.3862943611198906 -1.3862943611198906
          -1.3862943611198906 -1.3862943611198906))
      (stats (posterior -75.75341797525151)
        (likelihood+weight -5.545177444479562 1.0)
        (prior+weight -70.20824053077195 1.0)
        (desc-length 72) (dirichlet-prior 1.791759469228057))
      ())
    (program
      ((abstraction F16 ()
         (choose
           (elem "gray" (tr "l-forward" (F10))
             (tr "r-forward" (F8)))
           (elem "gray" (tr "l-forward" (F8))
             (tr "r-forward" (F8)))))
        (abstraction F0 () (elem "blue"))
        (abstraction F2 ()
          (elem "gray" (tr "l-forward" (F0))
            (tr "r-forward" (F0))))
        (abstraction F5 () (elem "gray" (tr "forward" (F0))))
        (abstraction F6 () (elem "blue" (tr "forward" (F5))))
        (abstraction F7 ()
          (elem "gray" (tr "l-forward" (F0))
            (tr "r-forward" (F6))))
        (abstraction F8 () (elem "red"))
        (abstraction F9 () (elem "gray" (tr "forward" (F8))))
        (abstraction F10 () (elem "red" (tr "forward" (F9)))))
      (lambda () (choose (F2) (F7) (F16)))
      ((-0.6931471805599453 -0.6931471805599453) (0.0) (0.0)
        (0.0) (0.0) (0.0) (0.0) (0.0) (0.0)
        (-1.0986122886681098 -1.0986122886681098
          -1.0986122886681098))
      (stats (posterior -74.85203026391963)
        (likelihood+weight -5.545177444479562 1.0)
        (prior+weight -69.30685281944005 1.0)
        (desc-length 70)
        (dirichlet-prior 0.6931471805599461))
      ())
    (program
      ((abstraction F17 ()
         (choose (elem "red" (tr "forward" (F9)))
           (elem "red")))
        (abstraction F16 ()
          (elem "gray" (tr "l-forward" (F17))
            (tr "r-forward" (F17))))
        (abstraction F0 () (elem "blue"))
        (abstraction F2 ()
          (elem "gray" (tr "l-forward" (F0))
            (tr "r-forward" (F0))))
        (abstraction F5 () (elem "gray" (tr "forward" (F0))))
        (abstraction F6 () (elem "blue" (tr "forward" (F5))))
        (abstraction F7 ()
          (elem "gray" (tr "l-forward" (F0))
            (tr "r-forward" (F6))))
        (abstraction F9 ()
          (elem "gray" (tr "forward" (F17)))))
      (lambda () (choose (F2) (F7) (F16)))
      ((-0.6931471805599453 -0.6931471805599453) (0.0) (0.0)
        (0.0) (0.0) (0.0) (0.0) (0.0)
        (-1.0986122886681098 -1.0986122886681098
          -1.0986122886681098))
      (stats (posterior -67.1862086239005)
        (likelihood+weight -6.87935580446044 1.0)
        (prior+weight -60.30685281944005 1.0)
        (desc-length 61)
        (dirichlet-prior 0.6931471805599461))
      ())
    (program
      ((abstraction F18 ()
         (choose
           (elem "gray" (tr "l-forward" (F0))
             (tr "r-forward" (F6)))
           (elem "gray" (tr "l-forward" (F0))
             (tr "r-forward" (F0)))))
        (abstraction F17 ()
          (choose (elem "red" (tr "forward" (F9)))
            (elem "red")))
        (abstraction F16 ()
          (elem "gray" (tr "l-forward" (F17))
            (tr "r-forward" (F17))))
        (abstraction F0 () (elem "blue"))
        (abstraction F5 () (elem "gray" (tr "forward" (F0))))
        (abstraction F6 () (elem "blue" (tr "forward" (F5))))
        (abstraction F9 ()
          (elem "gray" (tr "forward" (F17)))))
      (lambda () (choose (F18) (F16)))
      ((-0.6931471805599453 -0.6931471805599453)
        (-0.6931471805599453 -0.6931471805599453) (0.0)
        (0.0) (0.0) (0.0) (0.0)
        (-0.6931471805599453 -0.6931471805599453))
      (stats (posterior -65.87935580446046)
        (likelihood+weight -6.87935580446044 1.0)
        (prior+weight -59.0 1.0) (desc-length 59)
        (dirichlet-prior 1.3322676295501878e-15))
      ())
    (program
      ((abstraction F19 ()
         (choose (elem "blue" (tr "forward" (F5)))
           (elem "blue")))
        (abstraction F18 ()
          (elem "gray" (tr "l-forward" (F19))
            (tr "r-forward" (F19))))
        (abstraction F17 ()
          (choose (elem "red" (tr "forward" (F9)))
            (elem "red")))
        (abstraction F16 ()
          (elem "gray" (tr "l-forward" (F17))
            (tr "r-forward" (F17))))
        (abstraction F5 ()
          (elem "gray" (tr "forward" (F19))))
        (abstraction F9 ()
          (elem "gray" (tr "forward" (F17)))))
      (lambda () (choose (F18) (F16)))
      ((-0.6931471805599453 -0.6931471805599453) (0.0)
        (-0.6931471805599453 -0.6931471805599453) (0.0)
        (0.0) (0.0)
        (-0.6931471805599453 -0.6931471805599453))
      (stats (posterior -58.21353416444131)
        (likelihood+weight -8.213534164441317 1.0)
        (prior+weight -5e1 1.0) (desc-length 50)
        (dirichlet-prior 1.3322676295501878e-15))
      ())))
  ))

(define (pp-gr i)
  (let* ([comp-gr (compactify (list-ref merge-history i))])
    (begin
      (for-each pretty-print (program->abstractions comp-gr))
      (for-each pretty-print (grammar->stat-vec comp-gr)))))

(define (latex i)
  (latex-grammar (list-ref merge-history i)))

(define the-mgcg '(program
  ((abstraction F30 ()
     (choose
       (elem "gray" (tr "l-forward" (F26))
         (tr "r-forward" (F26)))
       (elem "gray" (tr "forward" (F26)))
       (elem "gray" (tr "forward" (F28)))
       (elem "gray" (tr "l-forward" (F28))
         (tr "r-forward" (F28)))))
    (abstraction F28 ()
      (choose (elem "blue")
        (elem "blue" (tr "forward" (F30)))))
    (abstraction F26 ()
      (choose (elem "red") (elem "red" (tr "forward" (F30))))))
  (lambda () (choose (F30)))
  ((-1.3862943611198906 -1.3862943611198906
     -1.3862943611198906 -1.3862943611198906)
    (-0.6931471805599453 -0.6931471805599453)
    (-0.6931471805599453 -0.6931471805599453) (0.0))
  (stats (posterior -64.300823953772)
    (likelihood+weight -19.408121055678468 1.0)
    (prior+weight -44.89270289809353 1.0) (desc-length 46)
    (dirichlet-prior 1.1072971019064708))
  (merge-history)))

;;(define the-mgcg (populate-stats data (assign-uniform-params (mgcg data))))
(define (all-diff-table)
  (str->tex
    ([latex-table '(c l l c c)]
     (append
       (list (latex-table-row 
               (begin-latex latex-cr latex-hline)
               (textup "\\#")
               (textup "Merged and new nonterminals")
               (left-up-rot (align-env (lookup-latex-name 'd-posterior)))
               ;; (left-up-rot (align-env (lookup-latex-name 'd-dl)))
               ;; (left-up-rot (align-env (lookup-latex-name 'd-prior)))
               (left-up-rot (align-env (lookup-latex-name 'd-likelihood)))
               ))
       (map (lambda (i)
              (begin-latex
                (primitive->tex (+ i 1)) "&"  (get-latex-diff (+ i 1) i)))
            (iota (- (length merge-history) 1)))))))

(define (get-latex-diff j i)
  (latex-mergediff-single-row
              (list-ref merge-history j)
              (list-ref merge-history i)
              ((lambda (d) (list 'merge-number: (list i j) d))
               (grammar-diff
                 (list-ref merge-history j)
                 (list-ref merge-history i)))))
 
(define (latex-diff j i)
  (begin (newline)
         (str->tex (latex-mergediff-single-row
                     (list-ref merge-history j)
                     (list-ref merge-history i)
                     ((lambda (d) (list 'merge-number: (list i j) d))
                      (grammar-diff
                        (list-ref merge-history j)
                        (list-ref merge-history i)))))
         (newline)))

(define (latex-diff-full j i)
  (str->tex (latex-mergediff-all
              (list-ref merge-history j)
              (list-ref merge-history i)
              ((lambda (d) (list 'merge-number: (list i j) d))
               (grammar-diff
                 (list-ref merge-history j)
                 (list-ref merge-history i))))))

(define not-in-lgcg '(elem "gray" (tr "l-forward" (elem "red"))
     (tr "r-forward"
       (elem "red"
         (tr "forward"
           (elem "gray" (tr "forward" (elem "red"))))))))

(define (run-if-num x k)
  (if (number? x) (k x)
    x))

(define ref-merge (curry list-ref merge-history))

(define-opt (generalizations i j (optional (top-N 500) (eps 0.01)))
            (max-take
              (sort (lambda (x y) (> (car x) (car y))) 
                    (get-generalizations-from 
                      (run-if-num i ref-merge)
                      (run-if-num j ref-merge) eps))
              top-N))

(define (clear-working)
  (begin
    (system "rm working*.sxml")
    (system "rm working*.graffle")))

(define (print-boxes summary)
  (begin (clear-working)
  (for-each write-graffle
            (summary->graffles "working" summary))))
