#!/usr/bin/env python

import csv
import os
import glob
import sys
import subprocess
import math
import pprint

# TODO: finalize file name format

def rowEntry (logDir):
    csvWriter = csv.writer(open(os.path.join(logDir,"grammar-stats-summary.csv"), 'w'), delimiter=',')
    csvWriter.writerow(rows[0])
   
    logFileName = glob.glob(os.path.join(logDir,"*.log"))[0]
    logFile = open(logFileName)
    fileData = os.path.basename(logFileName).split('_')
  
    likelihood=0
    descLength=0
    posterior=0	
    
    for line in logFile:
        lineList = line.split(' ') 
        if len(lineList)>0 and lineList[0]=="likelihood+weight":
            likelihood=lineList[1]
        if len(lineList)>0 and lineList[0]=="desc-length":
            descLength=lineList[1]
        if len(lineList)>0 and lineList[0]=="posterior":
            posterior=lineList[1]

    weightRatio = '%.2e'% float(fileData[4])
    likelihood = '%.2e'% math.exp(float(likelihood))
    posterior = '%.2f' % float(posterior)
    descLength = int(descLength)

    csvWriter.writerow([fileData[1], fileData[3], weightRatio, fileData[5], fileData[6], fileData[7].replace(".log",""), likelihood, descLength, posterior])

rows=[["grammar_type", "beam_width", "l_weight/p_weight", "prior_parameter", "stop-number", "strategy", "likelihood", "MDL", "posterior"]]
subdirs = [None]

if (len(sys.argv)<3):
    dir = sys.argv[1]
    rowEntry(dir)
    s = open(os.path.join(dir,"grammar-stats-summary.csv"))
    s.next()
    for line in s:
        rows.append(line.rstrip().split(","))

elif (len(sys.argv)>2 and (sys.argv[2]=="-a" or sys.argv[2]=="-ar")):
    dir = sys.argv[1]
    
    allWriter = csv.writer(open(os.path.join(dir,"all-stats-summary.csv"), 'w'), delimiter=',')
    allWriter.writerow(rows[0])

    for subDir in glob.glob(os.path.join(dir,"*")):
        if(len(glob.glob(os.path.join(subDir,"*.log")))>0):
            statsFile = os.path.join(subDir,"grammar-stats-summary.csv")
            if((not os.path.exists(statsFile)) or sys.argv[2]=="-ar"):
                rowEntry(subDir)
            subdirs.append(subDir)
            s = open(statsFile)
            s.next()
            for line in s:
                rows.append(line.rstrip().split(","))
                allWriter.writerow(line.rstrip().split(","))
else:
    print("not valid input")

def can_float(x):
    try:
        return float(x)
    except ValueError, TypeError:
        return None

dircat = os.path.join 

def print_html_table_row((r, sub_dir), fh):
    print >>fh, "<tr>",
    for item in r:
        print >>fh, "<td>",repr(item),"</td>",
    print >>fh, "<td>",("<a href=\"./" + (sub_dir or "None") + "\">" + (sub_dir or "None") + "</a>"),"</td>",
    print >>fh, "<td>",("<a href=\"./" + (dircat(sub_dir, "enumeration.html") if sub_dir != None else "None") + "\">" + (dircat(sub_dir, "enumeration.html") if sub_dir != None else "None") + "</a>"),"</td>",
    print >>fh, "</tr>"
    
    #print repr(row[0]).rjust(space), repr(row[1]).rjust(space), repr(row[2]).rjust(space), repr(row[3]).rjust(space), repr(row[4]).rjust(space), repr(row[5]).rjust(space), repr(row[6]).rjust(space), repr(row[7]).rjust(space), repr(row[8]).rjust(space)

space = 20
html_name = dir + ".html"
fh = open(html_name, "w")
print >>fh, "<html>"
print >>fh, "<head/>"
print >>fh, "<body>"
print >>fh, "Results for", dir, "<br>"
print >>fh, "<table>"
for row in sorted(zip(rows, subdirs), key = lambda x: can_float(x[0][2]) or -9001.0):
    print_html_table_row(row, fh)
print >>fh, "</table>"
print >>fh, "</body></html>"
