//parenting?
proc int numParens(string $pString)
{
    int $count = 0;
    while (true)
    {
        if(!endsWith($pString,")")) break;
        $count++;
        int $lastIndex = size($pString)-1;
        $pString = `substring $pString 1 $lastIndex`;
    }
    return $count;
}
proc float[] getMatrix(string $transforms[], string $transString)
{
    int $transformIndex;
    for ($i=1;$i<size($transforms);$i+=2) {
        if($transforms[$i]==$transString) { $transformIndex=$i; break;}}

    string $s = $transforms[$transformIndex+1];
    int $lastIndex = size($s)-1-numParens($s);
    $s = `substring $s 2 $lastIndex`;
    string $buffer[];
    $numTokens = `tokenize $s " " $buffer`;

    float $m[];
    for($i=0; $i<16; $i++) {
        $m[$i]=$buffer[$i];
    }
    return $m;
}
proc string getShape(string $s)
{
    int $lastIndex = size($s);
    string $temp = `substring $s 5 $lastIndex`;
    $temp = strip($temp);
    $lastIndex = size($temp)-1-numParens($temp);
    return `substring $temp 2 $lastIndex`;
}
proc string getTrans(string $s)
{
    int $lastIndex = size($s)-1;
    return `substring $s 5 $lastIndex`;
}
proc traverseSample (string $samples[], string $transforms[], int $p[], string $parentNode)
{
    if($p[0] < size($samples)) {
        int $currParens = $p[1];
        string $currSample = $samples[$p[0]];
        $currShape = getShape($currSample);

        string $temp[] = `instance $currShape`;
        string $transformNode = $temp[0];
        print($transformNode+": "+$parentNode+"\n");
        select $transformNode;
        move 0 0 0;                                
        if($parentNode!="") {
            parent $transformNode $parentNode;
            float $tm[] = getMatrix($transforms,getTrans($samples[$p[0]-1]));
            xform -m $tm[0] $tm[1] $tm[2] $tm[3] $tm[4] $tm[5] $tm[6] $tm[7] $tm[8] $tm[9] $tm[10] $tm[11] $tm[12] $tm[13] $tm[14] $tm[15];
        }
        else
             parent $transformNode sampleGroup;

        if (endsWith($currSample,")")) $p[1] -= numParens($currSample);
        else { 
            while($p[1] == $currParens) {
                $p[0] += 2;
                $p[1] += 2;
                traverseSample($samples, $transforms, $p, $transformNode);
            }
        }
    }
}

proc loadAndRender(int $index,string $fileName,string $pwd)
{
    // read in file
    $fileID=`fopen $fileName "r"`;
    string $exemplarString = ""; 
    string $nextLine = `fgetline $fileID`;

    while(size($nextLine)>0) {
        string $cleanLine = strip($nextLine);
        $exemplarString += $cleanLine;
        $nextLine = `fgetline $fileID`;
    }

    string $buffer[];
    $numTokens = `tokenize $exemplarString "('" $buffer`;

    // set up samples and transforms vector
    string $samples[]; string $transforms[];
    int $transformIndex;
    for($i=0; $i<size($buffer); $i++) {
        $buffer[$i]=strip($buffer[$i]);
        if($buffer[$i]=="define transforms") $transformIndex=$i;
    }
    appendStringArray($samples, $buffer, $transformIndex);
    $transforms = stringArrayRemove($samples, $buffer);

    group -em -n sampleGroup;
    int $p[];
    $p[0]=1;$p[1]=1;
    traverseSample($samples, $transforms, $p, "");

    showHidden -below sampleGroup;
    
    // make system render call
    // how do you change the renderer being used?
    $lastIndex=size($fileName)-3;
    $outName=`substring $fileName 1 $lastIndex`;
    $outName=$pwd+"/"+$outName;

    setAttr defaultRenderGlobals.imageFilePrefix -type "string" $outName;
    render -x 500 -y 500 renderCam;
    
    delete sampleGroup;

    print ($fileName+"\n");
    fclose $fileID;
}

// get names of all the .ss files that need to be processed
string $ls = system("ls enumeration/d*");
string $files[];
tokenize $ls "\n" $files;

// load exemplars and hide all the elements
file -o "../exemplars.mb";
select -ado;
hide `ls -sl`;
setAttr "defaultRenderGlobals.imageFormat" 32;

/*
string $globals[] = `listAttr defaultRenderGlobals`;
$globals = `sort $globals`;
print $globals;
*/

// for every .ss file, load model and render
string $pwd = system("pwd");
int $lastIndex = size($pwd)-1;
$pwd = `substring $pwd 1 $lastIndex`;
for($i=0;$i<size($files);$i++)
{
    loadAndRender($i,$files[$i],$pwd);
}
