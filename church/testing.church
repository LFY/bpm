(define (gen-data program amount)
  (let* ([sexpr (program->sexpr program)])
    (delete '() (repeat amount (lambda () (eval sexpr))))))

(define (time-it proc . name)
  (lambda args
    (let ([start-time (current-time)]
          [value (apply proc args)]
          [end-time (current-time)])
      (for-each display (list name " run-time:" (/ (time-second (time-difference start-time end-time)) 60.0) " minutes \n"))
      value)))


(define (evaluates?-test name value)
  (begin
    (for-each display (list name " value:" value "...passed!\n"))))

(define (equal?-test name test-val true-val)
  (begin
    (display "deterministic test: ")(display name)
    (if (not (equal? test-val true-val))
        (for-each display (list ".. failed! \nCORRECT value: "  true-val "\n TEST value: " test-val "\n"))
        (display ".. passed!\n"))))

(define (<?-test name first-val second-val)
  (begin
    (display "deterministic test: ")(display name)
    (if (not (< first-val second-val))
        (for-each display (list ".. failed! \nfirst value: "  first-val "\n second value: " second-val "\n"))
        (display ".. passed!\n"))))

(define timed-equal?-test (time-it equal?-test))

(define (member?-test name test-val set-of-true-vals)
  (begin
    (display "deterministic test: ")(display name)
    (if (not (member test-val set-of-true-vals))
        (for-each display (list " true values: "  set-of-true-vals ", test value: " test-val ".. failed!\n"))
        (display ".. passed!\n"))))

;;;NEEDS TO BE REFACTORED USING make-check-test-with-runs
;; (define (with-proposer-test distribution with-proposer-distribution expectation-fn true-expectation tolerance name)
;;   (begin
;;     (pretty-print name)
;;     (display "with-proposer NOT used....")
;;     (check-test distribution expectation-fn true-expectation tolerance name)
;;     (display "with-proposer used....")
;;     (check-test with-proposer-distribution expectation-fn true-expectation tolerance name)))


(define (make-check-test-with-runs runs)
  (lambda (info expectation-fn true-expectation tolerance name)
    (begin
      (let* ([estimates (map (lambda (run) (mean (map expectation-fn run))) ((time-it repeat name)runs (lambda () (info))))]
             [errors (map (lambda (estimate) (abs (- estimate true-expectation))) estimates)]
             [mean-abs-error (mean errors)])
        (if (> mean-abs-error tolerance)
            (for-each display (list name " true expectation: "  true-expectation ", test mean: " (* (mean estimates) 1.) ".. failed!\n"))
            (for-each display (list name ".. passed! \n")))))))


