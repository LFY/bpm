(define semantic-preserving-transformations (list compressions))
(define semantic-changing-transformations (list noisy-number-dearguments uniform-draw-dearguments same-variable-dearguments))

;;;searches through transformations of the sexpr (uniform-draw (list [observed data here])) , returns a thunk evaluates a uniforml draws over compressed forms of each observation, here data is a list of factor graphs
(define (learn-model data beam-size depth)
  (let* ([initial-sexpr (make-initial-sexpr data)]
         [learned-sexpr (beam-learn data initial-sexpr beam-size depth)]
         [learned-sexpr (if (null? learned-sexpr) initial-sexpr learned-sexpr)]
         [model (lambda () (lazy-list->all-list ((eval learned-sexpr))))])
    (pretty-print (list "compressed-program:" learned-sexpr "size: " (program-size learned-sexpr)))
    (draw-trees (pair "./model-output.png" (repeat 5 (lambda () (model)))))
    model))

;;;turns each image into factor-graphs then turns factor-graphs into programs then wraps that in a uniform draw
;;make-initial-sexpr :: images => scheme-program
(define (make-initial-sexpr trees)
  (let* ([tree-expressions (map tree->expression trees)])
   (list 'lambda '() (list (list 'uniform-draw (pair 'list (map thunkify tree-expressions)))))))

;;;returns an sexpr
(define (beam-learn data sexpr beam-size depth)
  (let* ([top-transformations 
          (sort-by-posterior
           data 
           (beam-learn-search-transformations data (make-program '() sexpr) beam-size depth))]
         [db (pretty-print (list "top transformations" top-transformations))])
    (if (null? top-transformations)
        sexpr
        (program->sexpr (program+->program (first top-transformations))))))

(define (beam-learn-search-transformations data program beam-size depth)
  (let ([init-program+ (make-program+ program 0 0 0 #f)])
    (depth-iterated-transformations (lambda (programs+) (best-n data programs+ beam-size)) init-program+ depth)))


(define (depth-iterated-transformations cfilter program+ depth)
  (let* ([db (for-each display (list "CURRENT DEPTH: " depth))]
         [transformed-programs+ (apply-and-filter-transformations depth cfilter program+)])
    (delete '()  (append transformed-programs+
             (apply append (map (lambda (prog) (depth-iterated-transformations cfilter prog (- depth 1))) transformed-programs+))))))

(define (apply-and-filter-transformations depth cfilter program+)
 (if (= depth 0)
     '()
     (let* ([semantics-preserved-programs+ (apply-transformations program+ semantic-preserving-transformations #t)]
            ;[db (pretty-print semantics-preserved-programs+)]
            [semantics-changed-programs+ (apply-transformations program+ semantic-changing-transformations #f)]
            [db (pretty-print (list "sem-pre" semantics-changed-programs+))])
       (cfilter (append semantics-preserved-programs+ semantics-changed-programs+)))))

;;each transformation in transformations returns a list of transformed programs
(define (apply-transformations program+ transformations semantics-preserving)
  (let* ([program (program+->program program+)]
         [transformed-programs (delete '() (concatenate (map (lambda (transform) (transform program #t)) transformations)))]
         [transformed-programs+ (map (lambda (program) (program+->program-transform semantics-preserving program+ program)) transformed-programs)])
    transformed-programs+))

(define (best-n data programs+ n)
  (max-take (sort-by-posterior data programs+) n))


(define (sort-by-posterior data programs+)
  (let* (;[db (for-each display (list "transformed-programs: " programs+ "\n"))]
         [programs (map program+->program programs+)]
         [semantics-flags (map program+->semantics-preserved programs+)]
         [log-priors (map log-prior programs)]
         [db (for-each display (list "log-priors: " log-priors "\n"))]
         [log-likelihoods (map (lambda (prog+ semantics-flag)
                                 (if semantics-flag
                                     (program+->log-likelihood prog+)
                                     (log-likelihood data (program+->program prog+) 10))) programs+ semantics-flags)]
         [db (for-each display (list "log-likelihoods: " log-likelihoods "\n"))]
         [posteriors (map + log-priors log-likelihoods)] ;;log-prior and log-likelihood are log-probabilities
         [new-programs+ (map make-program+ programs posteriors log-likelihoods log-priors semantics-flags)]
         [posteriors> (lambda (a b) (> (program+->posterior a) (program+->posterior b)))])
    (my-list-sort posteriors> new-programs+)))

;;how do you find normalized values?
(define (log-prior program)
  (- (program-size (program->sexpr program))))

;;;list sorting via something like quicksort
(define (my-list-sort compare lst)
  (if (null? lst)
      '()
      (let* ([pivot (first lst)]
             [lst (rest lst)]
             [lessthan+greaterthan (my-partition compare pivot lst)])
        (append (my-list-sort compare (first lessthan+greaterthan)) (pair pivot (my-list-sort compare (second lessthan+greaterthan)))))))

;;;returns a two item list where the first item is a list of all the elements where (compare item pivot) is true and the second is a list where the values are false
(define (my-partition compare pivot lst)
  (if (null? lst)
      (list '() '())
      (let* ([comparestrue+comparesfalse (my-partition compare pivot (rest lst))]
             [comparestrue (first comparestrue+comparesfalse)]
             [comparesfalse (second comparestrue+comparesfalse)]
             [current-item (first lst)])
        (if (compare current-item pivot)
            (list (pair current-item comparestrue) comparesfalse)
            (list comparestrue (pair current-item comparesfalse))))))
         

(define (combine-size-score sizes scores size-weight score-weight)
  (map +
       (map (lambda (x) (* x size-weight)) sizes)
       (map (lambda (x) (* (exp x) (- score-weight))) scores)))

(define (compose f g)
  (lambda (x) (f (g x))))


;;;given a topology for a factor graph generate factor graphs with that form (in python format)
;; (define generate-factor-graphs_top
;;   (lambda (prog-sexpr topology popsize)
;;     (let ([prog (eval (program->sexpr prog-sexpr))])
;;       (let* ([lazified-topology (list->lazy-list topology)]
;;              (samples (smc-core (map list (iota (+ 1 (lazy-list-size  lazified-topology)))) popsize 20
;;                                 (lambda (depth) (lambda () (let ((s (prog)))
;;                                                              (pair (lazy-topology-equal? s lazified-topology depth)
;;                                                                    (lambda () (first (lazy-list->list s depth)))))))))
;;              [factor-graphs (map (compose lazy-list->all-list mcmc-state->query-value) samples)])
;;         factor-graphs))))

;;;computes the likelihood of the data given the prog, should never receive '() as a prog
;;here we assume prog is a thunk we can apply, should be much faster since we don't have to eval
;;computes p(fg_top|compression) only takes into account the topology of a factor-graph
(define single-log-likelihood 
   (lambda (program popsize tree)
     (let* ([new-program (replace-color program)]
            [db (pretty-print (list "likelihood for program" new-program))]
            [model (eval (program->sexpr new-program))]
            [topology-scores+tree-parameters (compute-topology-scores+evaluate model tree popsize)]
            [topology-scores (first topology-scores+tree-parameters)]
            [trees-with-parameters (second topology-scores+tree-parameters)]
            [color-scores (map (lambda (tree-with-parameters) (compute-color-score tree tree-with-parameters)) trees-with-parameters)]
            [db (pretty-print (list "color-scores" color-scores))]
            [scores (map + topology-scores color-scores)]
            [db (pretty-print (list "scores: " (map exp scores)))]
            [score (if (null? scores)
                        -inf.0
                        (apply log-sum-exp scores))])
                                        ;(- (apply log-sum-exp scores) (log (length scores))))))
       score)))

(define (compute-color-score tree tree-with-parameters)
  (let ([db '();(pretty-print (list "compute-color" tree tree-with-parameters))
         ])
   (if (null? tree)
       0
       (+ (single-color-score (node->color tree) (node->color tree-with-parameters)) (apply + (map compute-color-score (node->children tree) (node->children tree-with-parameters)))))))

(define (single-color-score x mean+variance)
  (log (normal-pdf (first x) (first mean+variance) (second mean+variance))))

(define (compute-topology-scores+evaluate model tree popsize)
  (let* ([lazified-tree (list->lazy-list tree)]
         [samples (smc-core (map list (iota (+ 1 (lazy-list-size  lazified-tree)))) popsize 20
                                (lambda (depth) (lambda () (let ((s (model)))
                                                             (pair (lazy-topology-equal? s lazified-tree depth)
                                                                   (lambda () (first (lazy-list->list s depth))))))))]
         [repeat-symbol (find-repeat-symbol samples)]
         ;;remove duplicates in order to do selective model averaging:
         ;;find symbol for repeat function and delete (temporary fix)
         [samples (fold (lambda (s a) (if (member (mcmc-state->addrval s repeat-symbol) (map (lambda (x) (mcmc-state->addrval x repeat-symbol)) a)) a (pair s a))) '() samples)]
         [topology-scores (map mcmc-state->score samples)]
         [generated-trees (map mcmc-state->query-value samples)])
    (list topology-scores generated-trees)))
;;temporary fix of addresses for same xrps not being the same; this is due to the way smc-core creates the particles
;;the fix works because factor graph programs only contain node expressions and function definition (no uses of repeat)
;;a more permanent fix would be to use the rejection-initializer that can be passed an explicit starting address
;;assumes argument is a list and there is only one address that repeats (if at all) across all xrps

;;need to address the fact that the address containing the repeated address only once will not delete 
(define (mcmc-state->addrval s repeated)
  (map (lambda (d)
         (pair (delete repeated (xrp-draw-address (rest d))) (xrp-draw-value (rest d)))) (mcmc-state->xrp-draws s)))


(define (find-repeat-symbol states)
  (if (null? states)
      '()
      (let ([repeat-symbol (find-repeat-symbol-in-state (map rest (mcmc-state->xrp-draws (first states))))])
        (if (null? repeat-symbol)
            (find-repeat-symbol (rest states))
            repeat-symbol))))

(define (find-repeat-symbol-in-state state-xrp-draws)
  (if (null? state-xrp-draws)
      '()
      (let* ([addr (xrp-draw-address (first state-xrp-draws))]
             [repeat-symbol (find-repeated addr)])
        (if (null? repeat-symbol)
            (find-repeat-symbol-in-state (rest state-xrp-draws))
            repeat-symbol))))

(define (find-repeated addr-lst)
  (if (more-than-one? addr-lst)
      (let ([current (first addr-lst)])
        (if (and (equal? current (second addr-lst)) (not (null? current)))
            current
            (find-repeated (rest addr-lst))))
      '()))

;;assumes argument is a list, move this to util.ss
(define (more-than-one? lst)
  (if (null? lst)
      #f
      (if (null? (rest lst))
              #f
              #t)))

;;;estimates p(trees|program) ~= \frac{1}{R}\sum_{fg_r ~ p(fg|fg_top)}p(trees|fg)p(fg_top|prog) where R is the number of samples
;;;this is an importance sampler where the target distribution generates factor graphs based on topology extracted from the trees
;;assumes all factor-graphs from imags->factor-graphs have the same topology
;; '_' can be read as given e.g. fg-top_prog is fg-top given prog 
(define (log-likelihood trees prog sample-size)
  (apply + (map (lambda (tree) (single-log-likelihood prog sample-size tree)) trees)))


(define (score-parameters program tree)
  0)