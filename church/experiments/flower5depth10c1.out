convert ~/bpm/church/experiments/paramPartsData.png ~/Dropbox/bmm/paramPartsData.pdf
(((data (238.0) (0.3)) ((data (192.0) (0.3)))
   ((data (240.0) (0.3))) ((data (241.0) (0.3))))
  ((data (63.0) (0.3)) ((data (152.0) (0.3)))
    ((data (86.0) (0.3))) ((data (120.0) (0.3))))
  ((data (139.0) (0.3)) ((data (109.0) (0.3)))
    ((data (9e1) (0.3))) ((data (67.0) (0.3))))
  ((data (239.0) (0.3)) ((data (234.0) (0.3)))
    ((data (229.0) (0.3))) ((data (234.0) (0.3))))
  ((data (113.0) (0.3)) ((data (94.0) (0.3)))
    ((data (88.0) (0.3))) ((data (115.0) (0.3)))))
likelihood for program:  (let () (lambda () (uniform-choice (node (data (color (gaussian 238.0 . (25))) (size 0.3)) (node (data (color (gaussian 192.0 . (25))) (size 0.3))) (node (data (color (gaussian 240.0 . (25))) (size 0.3))) (node (data (color (gaussian 241.0 . (25))) (size 0.3)))) (node (data (color (gaussian 63.0 . (25))) (size 0.3)) (node (data (color (gaussian 152.0 . (25))) (size 0.3))) (node (data (color (gaussian 86.0 . (25))) (size 0.3))) (node (data (color (gaussian 120.0 . (25))) (size 0.3)))) (node (data (color (gaussian 139.0 . (25))) (size 0.3)) (node (data (color (gaussian 109.0 . (25))) (size 0.3))) (node (data (color (gaussian 9e1 . (25))) (size 0.3))) (node (data (color (gaussian 67.0 . (25))) (size 0.3)))) (node (data (color (gaussian 239.0 . (25))) (size 0.3)) (node (data (color (gaussian 234.0 . (25))) (size 0.3))) (node (data (color (gaussian 229.0 . (25))) (size 0.3))) (node (data (color (gaussian 234.0 . (25))) (size 0.3)))) (node (data (color (gaussian 113.0 . (25))) (size 0.3)) (node (data (color (gaussian 94.0 . (25))) (size 0.3))) (node (data (color (gaussian 88.0 . (25))) (size 0.3))) (node (data (color (gaussian 115.0 . (25))) (size 0.3)))))))

prior:  -162 /tmp/tree-0.687181528276.png
/tmp/tree-1.687181528276.png
/tmp/tree-2.687181528276.png
/tmp/tree-3.687181528276.png
/tmp/tree-4.687181528276.png
likelihood for program:  (let () (lambda () (uniform-choice (node (data (color (gaussian 238.0 . (25))) (size 0.3)) (node (data (color (gaussian 192.0 . (25))) (size 0.3))) (node (data (color (gaussian 240.0 . (25))) (size 0.3))) (node (data (color (gaussian 241.0 . (25))) (size 0.3)))) (node (data (color (gaussian 63.0 . (25))) (size 0.3)) (node (data (color (gaussian 152.0 . (25))) (size 0.3))) (node (data (color (gaussian 86.0 . (25))) (size 0.3))) (node (data (color (gaussian 120.0 . (25))) (size 0.3)))) (node (data (color (gaussian 139.0 . (25))) (size 0.3)) (node (data (color (gaussian 109.0 . (25))) (size 0.3))) (node (data (color (gaussian 9e1 . (25))) (size 0.3))) (node (data (color (gaussian 67.0 . (25))) (size 0.3)))) (node (data (color (gaussian 239.0 . (25))) (size 0.3)) (node (data (color (gaussian 234.0 . (25))) (size 0.3))) (node (data (color (gaussian 229.0 . (25))) (size 0.3))) (node (data (color (gaussian 234.0 . (25))) (size 0.3)))) (node (data (color (gaussian 113.0 . (25))) (size 0.3)) (node (data (color (gaussian 94.0 . (25))) (size 0.3))) (node (data (color (gaussian 88.0 . (25))) (size 0.3))) (node (data (color (gaussian 115.0 . (25))) (size 0.3)))))))

prior:  -162 likelihood for program:  (let () (lambda () (uniform-choice (node (data (color (gaussian 238.0 . (25))) (size 0.3)) (node (data (color (gaussian 192.0 . (25))) (size 0.3))) (node (data (color (gaussian 240.0 . (25))) (size 0.3))) (node (data (color (gaussian 241.0 . (25))) (size 0.3)))) (node (data (color (gaussian 63.0 . (25))) (size 0.3)) (node (data (color (gaussian 152.0 . (25))) (size 0.3))) (node (data (color (gaussian 86.0 . (25))) (size 0.3))) (node (data (color (gaussian 120.0 . (25))) (size 0.3)))) (node (data (color (gaussian 139.0 . (25))) (size 0.3)) (node (data (color (gaussian 109.0 . (25))) (size 0.3))) (node (data (color (gaussian 9e1 . (25))) (size 0.3))) (node (data (color (gaussian 67.0 . (25))) (size 0.3)))) (node (data (color (gaussian 239.0 . (25))) (size 0.3)) (node (data (color (gaussian 234.0 . (25))) (size 0.3))) (node (data (color (gaussian 229.0 . (25))) (size 0.3))) (node (data (color (gaussian 234.0 . (25))) (size 0.3)))) (node (data (color (gaussian 113.0 . (25))) (size 0.3)) (node (data (color (gaussian 94.0 . (25))) (size 0.3))) (node (data (color (gaussian 88.0 . (25))) (size 0.3))) (node (data (color (gaussian 115.0 . (25))) (size 0.3)))))))

prior:  -162 likelihood for program:  (let () (lambda () (uniform-choice (node (data (color (gaussian 238.0 . (25))) (size 0.3)) (node (data (color (gaussian 192.0 . (25))) (size 0.3))) (node (data (color (gaussian 240.0 . (25))) (size 0.3))) (node (data (color (gaussian 241.0 . (25))) (size 0.3)))) (node (data (color (gaussian 63.0 . (25))) (size 0.3)) (node (data (color (gaussian 152.0 . (25))) (size 0.3))) (node (data (color (gaussian 86.0 . (25))) (size 0.3))) (node (data (color (gaussian 120.0 . (25))) (size 0.3)))) (node (data (color (gaussian 139.0 . (25))) (size 0.3)) (node (data (color (gaussian 109.0 . (25))) (size 0.3))) (node (data (color (gaussian 9e1 . (25))) (size 0.3))) (node (data (color (gaussian 67.0 . (25))) (size 0.3)))) (node (data (color (gaussian 239.0 . (25))) (size 0.3)) (node (data (color (gaussian 234.0 . (25))) (size 0.3))) (node (data (color (gaussian 229.0 . (25))) (size 0.3))) (node (data (color (gaussian 234.0 . (25))) (size 0.3)))) (node (data (color (gaussian 113.0 . (25))) (size 0.3)) (node (data (color (gaussian 94.0 . (25))) (size 0.3))) (node (data (color (gaussian 88.0 . (25))) (size 0.3))) (node (data (color (gaussian 115.0 . (25))) (size 0.3)))))))

prior:  -162 likelihood for program:  (let () (lambda () (uniform-choice (node (data (color (gaussian 238.0 . (25))) (size 0.3)) (node (data (color (gaussian 192.0 . (25))) (size 0.3))) (node (data (color (gaussian 240.0 . (25))) (size 0.3))) (node (data (color (gaussian 241.0 . (25))) (size 0.3)))) (node (data (color (gaussian 63.0 . (25))) (size 0.3)) (node (data (color (gaussian 152.0 . (25))) (size 0.3))) (node (data (color (gaussian 86.0 . (25))) (size 0.3))) (node (data (color (gaussian 120.0 . (25))) (size 0.3)))) (node (data (color (gaussian 139.0 . (25))) (size 0.3)) (node (data (color (gaussian 109.0 . (25))) (size 0.3))) (node (data (color (gaussian 9e1 . (25))) (size 0.3))) (node (data (color (gaussian 67.0 . (25))) (size 0.3)))) (node (data (color (gaussian 239.0 . (25))) (size 0.3)) (node (data (color (gaussian 234.0 . (25))) (size 0.3))) (node (data (color (gaussian 229.0 . (25))) (size 0.3))) (node (data (color (gaussian 234.0 . (25))) (size 0.3)))) (node (data (color (gaussian 113.0 . (25))) (size 0.3)) (node (data (color (gaussian 94.0 . (25))) (size 0.3))) (node (data (color (gaussian 88.0 . (25))) (size 0.3))) (node (data (color (gaussian 115.0 . (25))) (size 0.3)))))))

prior:  -162 CURRENT DEPTH: 10 SIZE: -162 SEMANTICS PRESERVED: #f  

(let ()
  (lambda ()
    (uniform-choice
      (node (data (color (gaussian 238.0 25)) (size 0.3))
        (node (data (color (gaussian 192.0 25)) (size 0.3)))
        (node (data (color (gaussian 240.0 25)) (size 0.3)))
        (node (data (color (gaussian 241.0 25)) (size 0.3))))
      (node (data (color (gaussian 63.0 25)) (size 0.3))
        (node (data (color (gaussian 152.0 25)) (size 0.3)))
        (node (data (color (gaussian 86.0 25)) (size 0.3)))
        (node (data (color (gaussian 120.0 25)) (size 0.3))))
      (node (data (color (gaussian 139.0 25)) (size 0.3))
        (node (data (color (gaussian 109.0 25)) (size 0.3)))
        (node (data (color (gaussian 9e1 25)) (size 0.3)))
        (node (data (color (gaussian 67.0 25)) (size 0.3))))
      (node (data (color (gaussian 239.0 25)) (size 0.3))
        (node (data (color (gaussian 234.0 25)) (size 0.3)))
        (node (data (color (gaussian 229.0 25)) (size 0.3)))
        (node (data (color (gaussian 234.0 25)) (size 0.3))))
      (node (data (color (gaussian 113.0 25)) (size 0.3))
        (node (data (color (gaussian 94.0 25)) (size 0.3)))
        (node (data (color (gaussian 88.0 25)) (size 0.3)))
        (node (data (color (gaussian 115.0 25)) (size 0.3)))))))


log-priors: ((-162 #t) (-59 #t) (-69 #t) (-126 #t) (-145 #t) (-144 #t) (-80 #t) (-156 #t) (-157 #t) (-160 #t) (-161 #t))
CURRENT DEPTH: 9 SIZE: -59 SEMANTICS PRESERVED: #t  

(let ()
  (define F1
    (lambda (V1 V2 V3 V4)
      (node (data (color (gaussian V1 25)) (size 0.3))
        (node (data (color (gaussian V2 25)) (size 0.3)))
        (node (data (color (gaussian V3 25)) (size 0.3)))
        (node (data (color (gaussian V4 25)) (size 0.3))))))
  (lambda ()
    (uniform-choice (F1 238.0 192.0 240.0 241.0)
      (F1 63.0 152.0 86.0 120.0) (F1 139.0 109.0 9e1 67.0)
      (F1 239.0 234.0 229.0 234.0)
      (F1 113.0 94.0 88.0 115.0))))


log-priors: ((-59 #t) (-46 #t) (-55 #t) (-58 #t) (-57 #t) (-49 #t) (-57 #f) (-57 #f) (-57 #f) (-57 #f) (-57 #f) (-57 #f) (-57 #f) (-57 #f))
likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V4))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V4))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V4))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V4))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V4))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 155.4))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 155.4))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 155.4))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 155.4))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 155.4))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 146.6))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 146.6))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 146.6))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 146.6))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 146.6))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 156.2))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 156.2))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 156.2))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 156.2))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 156.2))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 158.4))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 158.4))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 158.4))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 158.4))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -57 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 158.4))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -57 CURRENT DEPTH: 8 SIZE: -46 SEMANTICS PRESERVED: #t  

(let ()
  (define F2
    (lambda (V5) (data (color (gaussian V5 25)) (size 0.3))))
  (define F1
    (lambda (V1 V2 V3 V4)
      (node (F2 V1) (node (F2 V2)) (node (F2 V3))
        (node (F2 V4)))))
  (lambda ()
    (uniform-choice (F1 238.0 192.0 240.0 241.0)
      (F1 63.0 152.0 86.0 120.0) (F1 139.0 109.0 9e1 67.0)
      (F1 239.0 234.0 229.0 234.0)
      (F1 113.0 94.0 88.0 115.0))))


log-priors: ((-46 #t) (-44 #f) (-44 #f) (-44 #f) (-44 #f) (-44 #f) (-44 #f) (-44 #f) (-44 #f))
likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 155.4))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 155.4))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 155.4))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 155.4))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 155.4))) (lambda () (uniform-choice (F1 238.0 192.0 240.0) (F1 63.0 152.0 86.0) (F1 139.0 109.0 9e1) (F1 239.0 234.0 229.0) (F1 113.0 94.0 88.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 146.6))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 146.6))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 146.6))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 146.6))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 146.6))) (lambda () (uniform-choice (F1 238.0 192.0 241.0) (F1 63.0 152.0 120.0) (F1 139.0 109.0 67.0) (F1 239.0 234.0 234.0) (F1 113.0 94.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 156.2))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 156.2))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 156.2))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 156.2))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 156.2))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 158.4))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 158.4))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 158.4))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 158.4))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 158.4))) (lambda () (uniform-choice (F1 192.0 240.0 241.0) (F1 152.0 86.0 120.0) (F1 109.0 9e1 67.0) (F1 234.0 229.0 234.0) (F1 94.0 88.0 115.0))))

prior:  -44 CURRENT DEPTH: 7 SIZE: -44 SEMANTICS PRESERVED: #f  

(let ()
  (define F2
    (lambda (V5) (data (color (gaussian V5 25)) (size 0.3))))
  (define F1
    (lambda (V1 V3 V4)
      ((lambda (V2)
         (node (F2 V1) (node (F2 V2)) (node (F2 V3))
           (node (F2 V4))))
        V4)))
  (lambda ()
    (uniform-choice (F1 238.0 240.0 241.0)
      (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
      (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))


log-priors: ((-44 #t) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f))
likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 CURRENT DEPTH: 6 SIZE: -44 SEMANTICS PRESERVED: #t  

(let ()
  (define F2
    (lambda (V5) (data (color (gaussian V5 25)) (size 0.3))))
  (define F1
    (lambda (V1 V3 V4)
      ((lambda (V2)
         (node (F2 V1) (node (F2 V2)) (node (F2 V3))
           (node (F2 V4))))
        V4)))
  (lambda ()
    (uniform-choice (F1 238.0 240.0 241.0)
      (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
      (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))


log-priors: ((-44 #t) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f))
likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 CURRENT DEPTH: 5 SIZE: -44 SEMANTICS PRESERVED: #t  

(let ()
  (define F2
    (lambda (V5) (data (color (gaussian V5 25)) (size 0.3))))
  (define F1
    (lambda (V1 V3 V4)
      ((lambda (V2)
         (node (F2 V1) (node (F2 V2)) (node (F2 V3))
           (node (F2 V4))))
        V4)))
  (lambda ()
    (uniform-choice (F1 238.0 240.0 241.0)
      (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
      (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))


log-priors: ((-44 #t) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f))
likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 CURRENT DEPTH: 4 SIZE: -44 SEMANTICS PRESERVED: #t  

(let ()
  (define F2
    (lambda (V5) (data (color (gaussian V5 25)) (size 0.3))))
  (define F1
    (lambda (V1 V3 V4)
      ((lambda (V2)
         (node (F2 V1) (node (F2 V2)) (node (F2 V3))
           (node (F2 V4))))
        V4)))
  (lambda ()
    (uniform-choice (F1 238.0 240.0 241.0)
      (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
      (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))


log-priors: ((-44 #t) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f))
likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 CURRENT DEPTH: 3 SIZE: -44 SEMANTICS PRESERVED: #t  

(let ()
  (define F2
    (lambda (V5) (data (color (gaussian V5 25)) (size 0.3))))
  (define F1
    (lambda (V1 V3 V4)
      ((lambda (V2)
         (node (F2 V1) (node (F2 V2)) (node (F2 V3))
           (node (F2 V4))))
        V4)))
  (lambda ()
    (uniform-choice (F1 238.0 240.0 241.0)
      (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
      (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))


log-priors: ((-44 #t) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f))
likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 CURRENT DEPTH: 2 SIZE: -44 SEMANTICS PRESERVED: #t  

(let ()
  (define F2
    (lambda (V5) (data (color (gaussian V5 25)) (size 0.3))))
  (define F1
    (lambda (V1 V3 V4)
      ((lambda (V2)
         (node (F2 V1) (node (F2 V2)) (node (F2 V3))
           (node (F2 V4))))
        V4)))
  (lambda ()
    (uniform-choice (F1 238.0 240.0 241.0)
      (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
      (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))


log-priors: ((-44 #t) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f))
likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 CURRENT DEPTH: 1 SIZE: -44 SEMANTICS PRESERVED: #t  

(let ()
  (define F2
    (lambda (V5) (data (color (gaussian V5 25)) (size 0.3))))
  (define F1
    (lambda (V1 V3 V4)
      ((lambda (V2)
         (node (F2 V1) (node (F2 V2)) (node (F2 V3))
           (node (F2 V4))))
        V4)))
  (lambda ()
    (uniform-choice (F1 238.0 240.0 241.0)
      (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
      (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))


log-priors: ((-44 #t) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f) (-42 #f))
likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V3))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V1))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) V4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3) ((lambda (V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 155.4))) (lambda () (uniform-choice (F1 238.0 240.0) (F1 63.0 86.0) (F1 139.0 9e1) (F1 239.0 229.0) (F1 113.0 88.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V4) ((lambda (V3) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 146.6))) (lambda () (uniform-choice (F1 238.0 241.0) (F1 63.0 120.0) (F1 139.0 67.0) (F1 239.0 234.0) (F1 113.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V3 V4) ((lambda (V1) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4)) 158.4))) (lambda () (uniform-choice (F1 240.0 241.0) (F1 86.0 120.0) (F1 9e1 67.0) (F1 229.0 234.0) (F1 88.0 115.0))))

prior:  -42 CURRENT DEPTH: 0 SIZE: -44 SEMANTICS PRESERVED: #t  

(let ()
  (define F2
    (lambda (V5) (data (color (gaussian V5 25)) (size 0.3))))
  (define F1
    (lambda (V1 V3 V4)
      ((lambda (V2)
         (node (F2 V1) (node (F2 V2)) (node (F2 V3))
           (node (F2 V4))))
        V4)))
  (lambda ()
    (uniform-choice (F1 238.0 240.0 241.0)
      (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
      (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))


log-priors: ((-59 #t) (-46 #t) (-44 #f) (-44 #t) (-44 #t) (-44 #t) (-44 #t) (-44 #t) (-44 #t) (-44 #t))
likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 238.0 240.0 241.0) (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0) (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))

prior:  -44 ("top transformations"
  ((program+
     (program
       ((abstraction F2 (V5)
          (data (color (gaussian V5 25)) (size 0.3)))
         (abstraction F1 (V1 V3 V4)
           ((lambda (V2)
              (node (F2 V1) (node (F2 V2)) (node (F2 V3))
                (node (F2 V4))))
             V4)))
       (lambda ()
         (uniform-choice (F1 238.0 240.0 241.0)
           (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
           (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))
     -136.12560239054193 -92.12560239054194 -44 #t)
    (program+
      (program
        ((abstraction F2 (V5)
           (data (color (gaussian V5 25)) (size 0.3)))
          (abstraction F1 (V1 V3 V4)
            ((lambda (V2)
               (node (F2 V1) (node (F2 V2)) (node (F2 V3))
                 (node (F2 V4))))
              V4)))
        (lambda ()
          (uniform-choice (F1 238.0 240.0 241.0)
            (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
            (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))
      -136.12560239054193 -92.12560239054194 -44 #t)
    (program+
      (program
        ((abstraction F2 (V5)
           (data (color (gaussian V5 25)) (size 0.3)))
          (abstraction F1 (V1 V3 V4)
            ((lambda (V2)
               (node (F2 V1) (node (F2 V2)) (node (F2 V3))
                 (node (F2 V4))))
              V4)))
        (lambda ()
          (uniform-choice (F1 238.0 240.0 241.0)
            (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
            (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))
      -136.12560239054193 -92.12560239054194 -44 #t)
    (program+
      (program
        ((abstraction F2 (V5)
           (data (color (gaussian V5 25)) (size 0.3)))
          (abstraction F1 (V1 V3 V4)
            ((lambda (V2)
               (node (F2 V1) (node (F2 V2)) (node (F2 V3))
                 (node (F2 V4))))
              V4)))
        (lambda ()
          (uniform-choice (F1 238.0 240.0 241.0)
            (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
            (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))
      -136.12560239054193 -92.12560239054194 -44 #t)
    (program+
      (program
        ((abstraction F2 (V5)
           (data (color (gaussian V5 25)) (size 0.3)))
          (abstraction F1 (V1 V3 V4)
            ((lambda (V2)
               (node (F2 V1) (node (F2 V2)) (node (F2 V3))
                 (node (F2 V4))))
              V4)))
        (lambda ()
          (uniform-choice (F1 238.0 240.0 241.0)
            (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
            (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))
      -136.12560239054193 -92.12560239054194 -44 #t)
    (program+
      (program
        ((abstraction F2 (V5)
           (data (color (gaussian V5 25)) (size 0.3)))
          (abstraction F1 (V1 V3 V4)
            ((lambda (V2)
               (node (F2 V1) (node (F2 V2)) (node (F2 V3))
                 (node (F2 V4))))
              V4)))
        (lambda ()
          (uniform-choice (F1 238.0 240.0 241.0)
            (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
            (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))
      -136.12560239054193 -92.12560239054194 -44 #t)
    (program+
      (program
        ((abstraction F2 (V5)
           (data (color (gaussian V5 25)) (size 0.3)))
          (abstraction F1 (V1 V3 V4)
            ((lambda (V2)
               (node (F2 V1) (node (F2 V2)) (node (F2 V3))
                 (node (F2 V4))))
              V4)))
        (lambda ()
          (uniform-choice (F1 238.0 240.0 241.0)
            (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
            (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))
      -136.12560239054193 -92.12560239054194 -44 #t)
    (program+
      (program
        ((abstraction F2 (V5)
           (data (color (gaussian V5 25)) (size 0.3)))
          (abstraction F1 (V1 V2 V3 V4)
            (node (F2 V1) (node (F2 V2)) (node (F2 V3))
              (node (F2 V4)))))
        (lambda ()
          (uniform-choice (F1 238.0 192.0 240.0 241.0)
            (F1 63.0 152.0 86.0 120.0)
            (F1 139.0 109.0 9e1 67.0)
            (F1 239.0 234.0 229.0 234.0)
            (F1 113.0 94.0 88.0 115.0))))
      -136.2519668750154 -90.25196687501538 -46 #t)
    (program+
      (program
        ((abstraction F2 (V5)
           (data (color (gaussian V5 25)) (size 0.3)))
          (abstraction F1 (V1 V3 V4)
            ((lambda (V2)
               (node (F2 V1) (node (F2 V2)) (node (F2 V3))
                 (node (F2 V4))))
              V4)))
        (lambda ()
          (uniform-choice (F1 238.0 240.0 241.0)
            (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
            (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))
      -137.22328373882107 -93.22328373882105 -44 #f)
    (program+
      (program
        ((abstraction F1 (V1 V2 V3 V4)
           (node (data (color (gaussian V1 25)) (size 0.3))
             (node
               (data (color (gaussian V2 25)) (size 0.3)))
             (node
               (data (color (gaussian V3 25)) (size 0.3)))
             (node
               (data (color (gaussian V4 25)) (size 0.3))))))
        (lambda ()
          (uniform-choice (F1 238.0 192.0 240.0 241.0)
            (F1 63.0 152.0 86.0 120.0)
            (F1 139.0 109.0 9e1 67.0)
            (F1 239.0 234.0 229.0 234.0)
            (F1 113.0 94.0 88.0 115.0))))
      -149.2519668750154 -90.25196687501538 -59 #t)))
("compressed-program:"
  (let ()
    (define F2
      (lambda (V5)
        (data (color (gaussian V5 25)) (size 0.3))))
    (define F1
      (lambda (V1 V3 V4)
        ((lambda (V2)
           (node (F2 V1) (node (F2 V2)) (node (F2 V3))
             (node (F2 V4))))
          V4)))
    (lambda ()
      (uniform-choice (F1 238.0 240.0 241.0)
        (F1 63.0 86.0 120.0) (F1 139.0 9e1 67.0)
        (F1 239.0 229.0 234.0) (F1 113.0 88.0 115.0))))
  "size: " 44)
() run-time:1558
#<procedure [char 116815 of /home/ih/bpm/church/experiments/paper.church.ss]>
/tmp/tree-0.39149160131.png
/tmp/tree-1.39149160131.png
/tmp/tree-2.39149160131.png
/tmp/tree-3.39149160131.png
/tmp/tree-4.39149160131.png
/tmp/tree-5.39149160131.png
/tmp/tree-6.39149160131.png
/tmp/tree-7.39149160131.png
/tmp/tree-8.39149160131.png
/tmp/tree-9.39149160131.png
/tmp/tree-10.39149160131.png
/tmp/tree-11.39149160131.png
/tmp/tree-12.39149160131.png
/tmp/tree-13.39149160131.png
/tmp/tree-14.39149160131.png
/tmp/tree-15.39149160131.png
/tmp/tree-16.39149160131.png
/tmp/tree-17.39149160131.png
/tmp/tree-18.39149160131.png
/tmp/tree-19.39149160131.png
/tmp/tree-20.39149160131.png
/tmp/tree-21.39149160131.png
/tmp/tree-22.39149160131.png
/tmp/tree-23.39149160131.png
/tmp/tree-24.39149160131.png
/tmp/tree-25.39149160131.png
/tmp/tree-26.39149160131.png
/tmp/tree-27.39149160131.png
/tmp/tree-28.39149160131.png
/tmp/tree-29.39149160131.png
/tmp/tree-30.39149160131.png
/tmp/tree-31.39149160131.png
/tmp/tree-32.39149160131.png
/tmp/tree-33.39149160131.png
/tmp/tree-34.39149160131.png
/tmp/tree-35.39149160131.png
/tmp/tree-36.39149160131.png
/tmp/tree-37.39149160131.png
/tmp/tree-38.39149160131.png
/tmp/tree-39.39149160131.png
/tmp/tree-40.39149160131.png
/tmp/tree-41.39149160131.png
/tmp/tree-42.39149160131.png
/tmp/tree-43.39149160131.png
/tmp/tree-44.39149160131.png
/tmp/tree-45.39149160131.png
/tmp/tree-46.39149160131.png
/tmp/tree-47.39149160131.png
/tmp/tree-48.39149160131.png
/tmp/tree-49.39149160131.png
