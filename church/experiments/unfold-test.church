(load "../testing.church")

(define timed-learn-model (time-it learn-model-initial-program))
(define timed-learn-sexpr (time-it learn-model-initial-sexpr))
(define timed-learn-list (time-it learn-model))

(define (mk-prog-body p) (list 'lambda '() p))

(define f1 (make-named-abstraction 'F1 '(data (A0 V0)) '(V0)))

(define unfold1 (make-program (list f1)
                              (mk-prog-body '(node (F1 1)
                                                   (node (F1 1)
                                                         (node (F1 1)
                                                               (node (F1 1)
                                                                     (node (F1 1)))))))))

(define unfold2 (make-program (list f1)
                              (mk-prog-body '(node (F1 1)
                                                   (node (F1 2)
                                                         (node (F1 3)
                                                               (node (F1 4)
                                                                     (node (F1 5)))))))))

(define (mk-unfold n)
  (letrec ([loop (lambda (acc n)
                   (if (= 0 n) acc
                     (loop
                       (list (list 'data (list n)) acc)
                     (- n 1))))])
    (loop (list (list 'data (list n))) (- n 1))))

(define (mk-unfold-const n)
  (letrec ([loop (lambda (acc n)
                   (if (= 0 n) acc
                     (loop
                       (list (list 'data (list 1)) acc)
                     (- n 1))))])
    (loop (list (list 'data (list 1))) (- n 1))))

(define (mk-unfold-double n)
  (letrec (

           [loop (lambda (acc n)
                   (if (= 0 n) acc
                     (loop
                       (list (list 'data (list n))
                             (list (list 'data (list n)))
                             acc)
                       (- n 1))))])
    (loop (list (list 'data (list n))) (- n 1))))

(define (mk-unfold-double-const n)
  (letrec (

           [loop (lambda (acc n)
                   (if (= 0 n) acc
                     (loop
                       (list (list 'data (list 1))
                             (list (list 'data (list 1)))
                             acc)
                       (- n 1))))])
    (loop (list (list 'data (list 1))) (- n 1))))
                                   
(define (mk-data n expr)
  (if (= n 0) '()
    (cons (expr n) (mk-data (- n 1) expr))))

;; (print "unfold test: increasing number")
;; (pretty-print unfold3)
;; (timed-learn-list unfold3 1 10)
;; 
;; (print "unfold test: constant number")
;; (pretty-print unfold3)
;; (timed-learn-list unfold4 1 10)

(define (run-unfold-test n expr msg)
  (let* ([unfold-data (mk-data n expr)])
    (begin
      (pretty-print msg)
      (pretty-print unfold-data)
      (timed-learn-list unfold-data 1 10))))

(run-unfold-test 20 mk-unfold "increasing number")
(run-unfold-test 20 mk-unfold-const "constant")
(run-unfold-test 20 mk-unfold-double "double increasing")
(run-unfold-test 20 mk-unfold-double-const "double constant")
