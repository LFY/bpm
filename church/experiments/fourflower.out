ih@wizard:~/bher-read-only$ cd ~
ih@wizard:~$ cd bpm
ih@wizard:~/bpm$ git branch
  bigtree
  color
  desugar
  experiments
  flip-recursion
  free-var-dearg
  infinite
  likelihood
  master
  posterior
  recursion
  revert
  same-variable
* stochastic
  treedraw
ih@wizard:~/bpm$ cd church/experiments/paper.church
bash: cd: church/experiments/paper.church: Not a directory
ih@wizard:~/bpm$ cd church/experiments/
ih@wizard:~/bpm/church/experiments$ ls
cacti.png           model-output.png        pickle
cactus.church       noisyNumberProgram.png  recursionData.png
cactus.church~      noisyNumberTrans1.png   sameVarTrans1.png
deargedProgram.png  noisyNumberTrans2.png   sameVarTrans2.png
gen-cacti.png       noisyProgram.png        test.png
generated.png       original-cacti.png      tree.png
hand-tree.png       original.church         trees2.png
hello1              original.church~        trees.png
hello2              paper.church            vineData.png
initData.png        paper.church~
initProgram.png     paramPartsData.png
ih@wizard:~/bpm/church/experiments$ bher paper.church
convert ~/bpm/church/experiments/paramPartsData.png ~/Dropbox/bmm/paramPartsData.pdflikelihood for program:  (let () (lambda () (uniform-choice (node (data (color (gaussian 251.0 . (25))) (size 0.3)) (node (data (color (gaussian 230.0 . (25))) (size 0.3))) (node (data (color (gaussian 213.0 . (25))) (size 0.3))) (node (data (color (gaussian 199.0 . (25))) (size 0.3)))) (node (data (color (gaussian 8e1 . (25))) (size 0.3)) (node (data (color (gaussian 148.0 . (25))) (size 0.3))) (node (data (color (gaussian 77.0 . (25))) (size 0.3))) (node (data (color (gaussian 94.0 . (25))) (size 0.3)))) (node (data (color (gaussian 202.0 . (25))) (size 0.3)) (node (data (color (gaussian 243.0 . (25))) (size 0.3))) (node (data (color (gaussian 205.0 . (25))) (size 0.3))) (node (data (color (gaussian 260.0 . (25))) (size 0.3)))) (node (data (color (gaussian 214.0 . (25))) (size 0.3)) (node (data (color (gaussian 149.0 . (25))) (size 0.3))) (node (data (color (gaussian 188.0 . (25))) (size 0.3))) (node (data (color (gaussian 211.0 . (25))) (size 0.3)))))))

prior:  -390 /tmp/tree-0.776233108217.png
/tmp/tree-1.776233108217.png
/tmp/tree-2.776233108217.png
/tmp/tree-3.776233108217.png
likelihood for program:  (let () (lambda () (uniform-choice (node (data (color (gaussian 251.0 . (25))) (size 0.3)) (node (data (color (gaussian 230.0 . (25))) (size 0.3))) (node (data (color (gaussian 213.0 . (25))) (size 0.3))) (node (data (color (gaussian 199.0 . (25))) (size 0.3)))) (node (data (color (gaussian 8e1 . (25))) (size 0.3)) (node (data (color (gaussian 148.0 . (25))) (size 0.3))) (node (data (color (gaussian 77.0 . (25))) (size 0.3))) (node (data (color (gaussian 94.0 . (25))) (size 0.3)))) (node (data (color (gaussian 202.0 . (25))) (size 0.3)) (node (data (color (gaussian 243.0 . (25))) (size 0.3))) (node (data (color (gaussian 205.0 . (25))) (size 0.3))) (node (data (color (gaussian 260.0 . (25))) (size 0.3)))) (node (data (color (gaussian 214.0 . (25))) (size 0.3)) (node (data (color (gaussian 149.0 . (25))) (size 0.3))) (node (data (color (gaussian 188.0 . (25))) (size 0.3))) (node (data (color (gaussian 211.0 . (25))) (size 0.3)))))))

prior:  -390 likelihood for program:  (let () (lambda () (uniform-choice (node (data (color (gaussian 251.0 . (25))) (size 0.3)) (node (data (color (gaussian 230.0 . (25))) (size 0.3))) (node (data (color (gaussian 213.0 . (25))) (size 0.3))) (node (data (color (gaussian 199.0 . (25))) (size 0.3)))) (node (data (color (gaussian 8e1 . (25))) (size 0.3)) (node (data (color (gaussian 148.0 . (25))) (size 0.3))) (node (data (color (gaussian 77.0 . (25))) (size 0.3))) (node (data (color (gaussian 94.0 . (25))) (size 0.3)))) (node (data (color (gaussian 202.0 . (25))) (size 0.3)) (node (data (color (gaussian 243.0 . (25))) (size 0.3))) (node (data (color (gaussian 205.0 . (25))) (size 0.3))) (node (data (color (gaussian 260.0 . (25))) (size 0.3)))) (node (data (color (gaussian 214.0 . (25))) (size 0.3)) (node (data (color (gaussian 149.0 . (25))) (size 0.3))) (node (data (color (gaussian 188.0 . (25))) (size 0.3))) (node (data (color (gaussian 211.0 . (25))) (size 0.3)))))))

prior:  -390 likelihood for program:  (let () (lambda () (uniform-choice (node (data (color (gaussian 251.0 . (25))) (size 0.3)) (node (data (color (gaussian 230.0 . (25))) (size 0.3))) (node (data (color (gaussian 213.0 . (25))) (size 0.3))) (node (data (color (gaussian 199.0 . (25))) (size 0.3)))) (node (data (color (gaussian 8e1 . (25))) (size 0.3)) (node (data (color (gaussian 148.0 . (25))) (size 0.3))) (node (data (color (gaussian 77.0 . (25))) (size 0.3))) (node (data (color (gaussian 94.0 . (25))) (size 0.3)))) (node (data (color (gaussian 202.0 . (25))) (size 0.3)) (node (data (color (gaussian 243.0 . (25))) (size 0.3))) (node (data (color (gaussian 205.0 . (25))) (size 0.3))) (node (data (color (gaussian 260.0 . (25))) (size 0.3)))) (node (data (color (gaussian 214.0 . (25))) (size 0.3)) (node (data (color (gaussian 149.0 . (25))) (size 0.3))) (node (data (color (gaussian 188.0 . (25))) (size 0.3))) (node (data (color (gaussian 211.0 . (25))) (size 0.3)))))))

prior:  -390 CURRENT DEPTH: 3 SIZE: -390 SEMANTICS PRESERVED: #f  

(let ()
  (lambda ()
    (uniform-choice
      (node (data (color (gaussian 251.0 25)) (size 0.3))
        (node (data (color (gaussian 230.0 25)) (size 0.3)))
        (node (data (color (gaussian 213.0 25)) (size 0.3)))
        (node (data (color (gaussian 199.0 25)) (size 0.3))))
      (node (data (color (gaussian 8e1 25)) (size 0.3))
        (node (data (color (gaussian 148.0 25)) (size 0.3)))
        (node (data (color (gaussian 77.0 25)) (size 0.3)))
        (node (data (color (gaussian 94.0 25)) (size 0.3))))
      (node (data (color (gaussian 202.0 25)) (size 0.3))
        (node (data (color (gaussian 243.0 25)) (size 0.3)))
        (node (data (color (gaussian 205.0 25)) (size 0.3)))
        (node (data (color (gaussian 260.0 25)) (size 0.3))))
      (node (data (color (gaussian 214.0 25)) (size 0.3))
        (node (data (color (gaussian 149.0 25)) (size 0.3)))
        (node (data (color (gaussian 188.0 25)) (size 0.3)))
        (node (data (color (gaussian 211.0 25)) (size 0.3)))))))


log-priors: ((-390 #t) (-162 #t) (-171 #t) (-306 #t) (-351 #t) (-348 #t) (-198 #t))
CURRENT DEPTH: 2 SIZE: -162 SEMANTICS PRESERVED: #t  

(let ()
  (define F1
    (lambda (V1 V2 V3 V4)
      (node (data (color (gaussian V1 25)) (size 0.3))
        (node (data (color (gaussian V2 25)) (size 0.3)))
        (node (data (color (gaussian V3 25)) (size 0.3)))
        (node (data (color (gaussian V4 25)) (size 0.3))))))
  (lambda ()
    (uniform-choice (F1 251.0 230.0 213.0 199.0)
      (F1 8e1 148.0 77.0 94.0) (F1 202.0 243.0 205.0 260.0)
      (F1 214.0 149.0 188.0 211.0))))


log-priors: ((-162 #t) (-123 #t) (-150 #t) (-159 #t) (-156 #t) (-132 #t) (-159 #f) (-159 #f) (-159 #f) (-159 #f) (-159 #f) (-159 #f) (-159 #f) (-159 #f))
likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V1))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V1))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V1))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V1))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V2))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V2))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V2))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V2))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V1))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V1))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V1))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V1))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) V3))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 191.0))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 191.0))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 191.0))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 191.0))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 170.75))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 170.75))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 170.75))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 170.75))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 192.5))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 192.5))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 192.5))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 192.5))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 186.75))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 186.75))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 186.75))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -159 likelihood for program:  (let () (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (data (color (gaussian V1 25)) (size 0.3)) (node (data (color (gaussian V2 25)) (size 0.3))) (node (data (color (gaussian V3 25)) (size 0.3))) (node (data (color (gaussian V4 25)) (size 0.3))))) 186.75))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -159 CURRENT DEPTH: 1 SIZE: -123 SEMANTICS PRESERVED: #t  

(let ()
  (define F2
    (lambda (V5) (data (color (gaussian V5 25)) (size 0.3))))
  (define F1
    (lambda (V1 V2 V3 V4)
      (node (F2 V1) (node (F2 V2)) (node (F2 V3))
        (node (F2 V4)))))
  (lambda ()
    (uniform-choice (F1 251.0 230.0 213.0 199.0)
      (F1 8e1 148.0 77.0 94.0) (F1 202.0 243.0 205.0 260.0)
      (F1 214.0 149.0 188.0 211.0))))


log-priors: ((-123 #t) (-120 #f) (-120 #f) (-120 #f) (-120 #f) (-120 #f) (-120 #f) (-120 #f) (-120 #f))
likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V3))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V3))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V3))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V3))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V2))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V4))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 191.0))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 191.0))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 191.0))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 191.0))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 170.75))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 170.75))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 170.75))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V4) ((lambda (V3) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 170.75))) (lambda () (uniform-choice (F1 251.0 230.0 199.0) (F1 8e1 148.0 94.0) (F1 202.0 243.0 260.0) (F1 214.0 149.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 192.5))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 192.5))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 192.5))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V3 V4) ((lambda (V2) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 192.5))) (lambda () (uniform-choice (F1 251.0 213.0 199.0) (F1 8e1 77.0 94.0) (F1 202.0 205.0 260.0) (F1 214.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 186.75))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 186.75))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 186.75))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V2 V3 V4) ((lambda (V1) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) 186.75))) (lambda () (uniform-choice (F1 230.0 213.0 199.0) (F1 148.0 77.0 94.0) (F1 243.0 205.0 260.0) (F1 149.0 188.0 211.0))))

prior:  -120 CURRENT DEPTH: 0 SIZE: -120 SEMANTICS PRESERVED: #f  

(let ()
  (define F2
    (lambda (V5) (data (color (gaussian V5 25)) (size 0.3))))
  (define F1
    (lambda (V1 V2 V3)
      ((lambda (V4)
         (node (F2 V1) (node (F2 V2)) (node (F2 V3))
           (node (F2 V4))))
        V3)))
  (lambda ()
    (uniform-choice (F1 251.0 230.0 213.0)
      (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0)
      (F1 214.0 149.0 188.0))))


log-priors: ((-162 #t) (-123 #t) (-120 #f))
likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V3))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V3))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V3))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -120 likelihood for program:  (let () (define F2 (lambda (V5) (data (color (gaussian V5 25)) (size 0.3)))) (define F1 (lambda (V1 V2 V3) ((lambda (V4) (node (F2 V1) (node (F2 V2)) (node (F2 V3)) (node (F2 V4)))) V3))) (lambda () (uniform-choice (F1 251.0 230.0 213.0) (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0) (F1 214.0 149.0 188.0))))

prior:  -120 ("top transformations"
  ((program+
     (program
       ((abstraction F2 (V5)
          (data (color (gaussian V5 25)) (size 0.3)))
         (abstraction F1 (V1 V2 V3)
           ((lambda (V4)
              (node (F2 V1) (node (F2 V2)) (node (F2 V3))
                (node (F2 V4))))
             V3)))
       (lambda ()
         (uniform-choice (F1 251.0 230.0 213.0)
           (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0)
           (F1 214.0 149.0 188.0))))
     -194.63825980200707 -74.63825980200707 -120 #f)
    (program+
      (program
        ((abstraction F2 (V5)
           (data (color (gaussian V5 25)) (size 0.3)))
          (abstraction F1 (V1 V2 V3 V4)
            (node (F2 V1) (node (F2 V2)) (node (F2 V3))
              (node (F2 V4)))))
        (lambda ()
          (uniform-choice (F1 251.0 230.0 213.0 199.0)
            (F1 8e1 148.0 77.0 94.0)
            (F1 202.0 243.0 205.0 260.0)
            (F1 214.0 149.0 188.0 211.0))))
      -194.73555057624407 -71.73555057624405 -123 #t)
    (program+
      (program
        ((abstraction F1 (V1 V2 V3 V4)
           (node (data (color (gaussian V1 25)) (size 0.3))
             (node
               (data (color (gaussian V2 25)) (size 0.3)))
             (node
               (data (color (gaussian V3 25)) (size 0.3)))
             (node
               (data (color (gaussian V4 25)) (size 0.3))))))
        (lambda ()
          (uniform-choice (F1 251.0 230.0 213.0 199.0)
            (F1 8e1 148.0 77.0 94.0)
            (F1 202.0 243.0 205.0 260.0)
            (F1 214.0 149.0 188.0 211.0))))
      -233.73555057624407 -71.73555057624405 -162 #t)))
("compressed-program:"
  (let ()
    (define F2
      (lambda (V5)
        (data (color (gaussian V5 25)) (size 0.3))))
    (define F1
      (lambda (V1 V2 V3)
        ((lambda (V4)
           (node (F2 V1) (node (F2 V2)) (node (F2 V3))
             (node (F2 V4))))
          V3)))
    (lambda ()
      (uniform-choice (F1 251.0 230.0 213.0)
        (F1 8e1 148.0 77.0) (F1 202.0 243.0 205.0)
        (F1 214.0 149.0 188.0))))
  "size: " 40)
() run-time:368
#<procedure [char 116815 of /home/ih/bpm/church/experiments/paper.church.ss]>
ih@wizard:~/bpm/church/experiments$ /tmp/tree-0.089522200901.png
/tmp/tree-1.089522200901.png
/tmp/tree-2.089522200901.png
/tmp/tree-3.089522200901.png
/tmp/tree-4.089522200901.png
/tmp/tree-5.089522200901.png
/tmp/tree-6.089522200901.png
/tmp/tree-7.089522200901.png
/tmp/tree-8.089522200901.png
/tmp/tree-9.089522200901.png
/tmp/tree-10.089522200901.png
/tmp/tree-11.089522200901.png
/tmp/tree-12.089522200901.png
/tmp/tree-13.089522200901.png
/tmp/tree-14.089522200901.png
/tmp/tree-15.089522200901.png
/tmp/tree-16.089522200901.png
/tmp/tree-17.089522200901.png
/tmp/tree-18.089522200901.png
/tmp/tree-19.089522200901.png
