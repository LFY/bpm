;;;node code
(define noise-params (pair 0 0))
;;set-growth/label-noise! won't work as desired until eval uses current-envirnoment instead of loading factor-graph.church each time 
(define (set-growth-noise! new-val) (set-car! noise-params new-val))  
(define (set-label-noise! new-val) (set-cdr! noise-params new-val))
(define growth-noise first)
(define label-noise rest)
(define labels '(a b))

(define root '(a))

;;;assumes all node information comes in a list as item0 e.g. (node '(label distance angle) children) where children is a list of nodes
(define f
  (lazify
   (lambda ()
     (flip))))
     ;p(lazy-pair (flip) '()))))


(define (scheme-format->python-format scheme-sexpr)
  (process-nodes scheme-sexpr))

(define (process-nodes scheme-sexpr)
  (if (null? scheme-sexpr)
      '()
      (append (list 'N (process-data (first scheme-sexpr))) (map process-nodes (rest scheme-sexpr)))))

(define (process-data data-list)
  (let ([label (second data-list)]
        [radius (third data-list)]
        [blobbiness (fourth data-list)]
        [distance-info (fifth data-list)]
        [straightness (sixth data-list)])
    (list 'data (pair 'label label) (pair 'radius radius) (pair 'blobbiness blobbiness) (pair 'Distance distance-info) (pair 'Straightness straightness))))

(define node
  (lazify 
   (lambda (item0 . items)
     (if (null? items)
         (lazy-pair item0 '())
         (lazy-pair item0 (apply node items))))))

;;returns a list that contains all the color information
(define node->data first)

(define (node->color node)
  (second (node->data node)))
(define (node->children node)
  (rest node))
(define data->color second)
(define data->size third)
(define (graph->program graph)
  (if (null? graph)
      '()
      (append (list 'node (list 'quote (first graph)))
              (map graph->program (rest graph)))))


;;;temporary
(define (data . sexpr) (lazy-pair 'data (apply node sexpr)))
;(define data node)
(define radius node)
(define size node)
;(define (color x) (lazify (node (round (gaussian x 25)))))
(define (color x)
  (if (number? x)  ;;might not be a number if the program is converted to using replace gaussians (should also do this for size)
      (node (round x)) 
      x))
(define blobbiness node)
(define Distance node)
(define Straightness node)
(define label node)
(define N node)
(define G1 node)
(define G2 node)
(define recursive-draw uniform-draw)