(load "../testing.church")
;;;test parameters
(define error-tolerance .07)
(define samples 1)
(define check-test (make-check-test-with-runs 1))
(define (almost= a b)
  (< (abs (- b a)) error-tolerance))

(define tree '((data (1) (1))
              ((data (20) (2)))))

(define tree-expression '(N (data (color 1) (size 1))
                            (N (data (color 2) (size 2)))))
;; (equal?-test "evaluation test" (lazy-list->all-list (eval tree-expression)) tree)
;; (equal?-test "tree->expression test" (tree->expression tree) tree-expression)

(define tree2-expression '(N (data (color 1) (size 5))))
(define tree2 (lazy-list->all-list (eval tree2-expression)))
(define trees (list tree))
(define single-node-tree '((data (1) (1))))
(define single-node-program (make-program '() (make-initial-sexpr (list single-node-tree))))

;;;global test data
(define worse-than-initial-sexpr (list 'lambda '() (list (list 'uniform-draw  (list 'list (list 'lambda '() tree-expression) (list 'lambda '() tree2-expression))))))

(define models-for-comparison (let* ([sexprs (list (make-initial-sexpr trees) worse-than-initial-sexpr)]
                                     [possible-programs (map (lambda (p) (make-program '() p)) sexprs)])
                                possible-programs))

;;;make-initial-sexpr test, this is a program that returns lazy trees
;; (equal?-test "initial-sexpr test sexpr" (lazy-list->all-list ((eval (make-initial-sexpr trees)))) tree)

;;(pretty-print ((eval (make-initial-sexpr trees))))
;; (equal?-test "initial sexpr evaluates to lazy-pair" (lazy-pair? ((eval (make-initial-sexpr trees)))) #t)

;;;apply-and-filter-transformations
;; (define timed-apply-and-filter-transformations (time-it apply-and-filter-transformations "apply-and-filter-transformations"))
;; (evaluates?-test "timed-apply-and-filter-transformations" (timed-apply-and-filter-transformations 1 (lambda (x) x) (make-program+ (make-program '() (make-initial-sexpr trees)) 0 0 0 #f)))

;;;depth-iterated-compressions
(define timed-iterated-transformations (time-it depth-iterated-transformations "depth-iterated-transformations"))
;; (let* ([abstraction1 (make-named-abstraction 'F1 '(node V1) '(V1))]
;;        [program1 (make-program (list abstraction1) '(F1 (F1 1)))]
;;        [abstraction21 (make-named-abstraction 'F2 '(V2 V3) '(V2 V3))]
;;        [abstraction22 (make-named-abstraction 'F1 '(F2 node V1) '(V1))]
;;        [program2 (make-program (list abstraction21 abstraction22) '(F2 F1 (F2 F1 1)))]
;;        [abstraction3 (make-named-abstraction 'F2 '(V2 (F1 V3)) '(V2 V3))]
;;        [program3 (make-program (list abstraction3 abstraction1) '(F2 F1 1))]
;;        [abstraction4 (make-named-abstraction 'F2 '(F1 V2) '(V2))]
;;        [program4 (make-program (list abstraction4 abstraction1) '(F2 (F2 1)))]
;;        [abstraction5 (make-named-abstraction 'F1 '(let ([V1 ((uniform-draw (list (lambda () (F1)) (lambda () 1))))]) (node V1)) '())]
;;        [program5 (make-program (list abstraction5) '(F1))])
;;   (equal?-test "depth-iterated-transformations internalize-argument test"
;;                (timed-iterated-transformations (lambda (x) x) (make-program '() '(node (node 1))) 2)
;;                (list program1 program2 program3 program4 program5)))


;; (evaluates?-test "depth-iterated-transformations" (timed-iterated-transformations (lambda (x) x) (make-program+ (make-program '() (make-initial-sexpr trees)) 0 0 0 #f) 2))

;;;log-prior (how do you normalize these values?)
;; (equal?-test "log-prior test" (log-prior (make-program '() '(+ 2 3 4))) -5)


;;;score-fg-top_program scoring test
;; (equal?-test "score-tree-top_program w/ program that can produce different topologies"
;;              (exp (score-tree-top_program (second models-for-comparison) '((data (0) (0))) 20))
;;              (/ 1.0 2))

;; (equal?-test "score-tree-top_program w/ program that cannot produce target topologies"
;;              (exp (score-tree-top_program (first models-for-comparison) '((data)) 20))
;;              0.0)

;; (equal?-test "score-tree-top_program w/ program that produces exactly target topology"
;;              (exp (score-tree-top_program (first models-for-comparison) tree 20))
;;              1.0)
;;;generate-trees_top
;; (let ([graph (lazy-list->all-list (eval tree))])
;;   (equal?-test "generate-trees_top" (map scheme-format->python-format (generate-factor-graphs_top (first models-for-comparison) graph 2)) (list tree tree)))

;; (let ([graph (lazy-list->all-list (eval tree2-expression))])
;;   (equal?-test "generate-trees_top" (map scheme-format->python-format (generate-trees_top (second models-for-comparison) graph 2)) (list tree2-expression tree2-expression)))
;;;single-log-likelihood
(define timed-single-log-likelihood (time-it single-log-likelihood "single-log-likelihood"))
(let ([single-node-data '((data (2) (1)))])
  (equal?-test "likelihood for single node" (exp (single-log-likelihood single-node-program 10 single-node-data)) 0.026537))

(let ([two-node-data '((data (2) (1)) ((data (2) (1))))])
  (equal?-test "likelihood for two node" (exp (single-log-likelihood (second models-for-comparison) 10 two-node-data))  (* .5 (normal-pdf 2 1 15) (normal-pdf 2 2 15))))

;;;log-likelihood
;; (equal?-test "log-likelihood test single possibility program" (log-likelihood trees (first models-for-comparison) 10) (log 1.0))
;; (equal?-test "log-likelihood test two possibility program" (log-likelihood trees (second models-for-comparison) 10) (log .5))
;;;sort-by-posterior
;;(define timed-sort-by-posterior (time-it sort-by-posterior "sort-by-posterior"))
;; (let* ([first-program+ (make-program+ (first models-for-comparison) 0 0 0 #f)]
;;        [second-program+ (make-program+ (second models-for-comparison) 0 0 0 #f)]
;;        [models+ (list first-program+ second-program+)])
;;   (equal?-test "sort-by-posterior" (timed-sort-by-posterior trees models+) models+))

;; (let* ([first-program+ (make-program+ (first models-for-comparison) 0 10 0 #f)]
;;        [second-program+ (make-program+ (second models-for-comparison) 0 100 0 #t)]
;;        [models+ (list first-program+ second-program+)])
;;   (equal?-test "sort-by-posterior only compute second likelihood" (timed-sort-by-posterior trees models+) (reverse models+)))


;;;best-n tests
;; (define timed-best-n (time-it best-n "best-n"))
;; (equal?-test "best-n by score only" (timed-best-n trees models-for-comparison 1) (list (make-program '() (make-initial-sexpr trees))))


;;;beam-learn-search-transformations test
;; (define timed-beam-learn-search-transformations (time-it beam-learn-search-transformations "beam-learn-search"))
;; (evaluates?-test "beam-learn-search-transformations" (timed-beam-learn-search-transformations trees (make-program '() (make-initial-sexpr trees)) 2 2))


;;;beam-learn test
;;beam learn takes a list of factors graphs as data and an sexpr
;;(evaluates?-test "beam-learn runs" (beam-learn trees (make-initial-sexpr trees) 1 2))


;;;learn-model tests
;;type check, learn-model should process a list of trees and return a function that generates trees
;; (define timed-learn-model (time-it learn-model))
;; (evaluates?-test "learned-model" ((timed-learn-model trees 1 2)))


(exit)
