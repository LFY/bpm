(import (printing)
        (util)
        (_srfi :67)
        (program))


(define grammar
  '(program
     ((abstraction F157 ()
        (choose
          (elem "elt17" (tr "trans80" (F150))
            (tr "trans79" (F41)) (tr "trans78" (F42))
            (tr "trans77" (F122)))
          (elem "elt17" (tr "trans70" (F154))
            (tr "trans69" (F122)) (tr "trans66" (F155))
            (tr "trans51" (F156)))
          (elem "elt17" (tr "trans112" (F150))
            (tr "trans111" (F2)) (tr "trans110" (F3)))
          (elem "elt17" (tr "trans34" (F0))
            (tr "trans33" (F2)) (tr "trans32" (F17))
            (tr "trans31" (F94)) (tr "trans30" (F95))
            (tr "trans29" (F123)) (tr "trans28" (F95))
            (tr "trans27" (F98)))
          (elem "elt17" (tr "trans58" (F155))
            (tr "trans55" (F155)) (tr "trans54" (F3))
            (tr "trans51" (F156)) (tr "trans47" (F155)))
          (elem "elt17" (tr "trans87" (F0))
            (tr "trans29" (F123)) (tr "trans86" (F95))
            (tr "trans31" (F94)) (tr "trans85" (F74)))
          (elem "elt17" (tr "trans102" (F0))
            (tr "trans101" (F3)))))
       (abstraction F156 ()
         (choose (elem "elt10" (tr "trans95" (F0)))
           (elem "elt10" (tr "trans107" (F6))
             (tr "trans106" (F7)) (tr "trans105" (F8)))
           (elem "elt10" (tr "trans26" (F125))
             (tr "trans25" (F126)))
           (elem "elt10" (tr "trans92" (F125))
             (tr "trans91" (F126)))
           (elem "elt10" (tr "trans53" (F6))
             (tr "trans52" (F126)))
           (elem "elt10" (tr "trans12" (F124))
             (tr "trans11" (F126)) (tr "trans10" (F98)))
           (elem "elt10" (tr "trans53" (F6))
             (tr "trans65" (F42)) (tr "trans64" (F63)))))
       (abstraction F155 ()
         (choose
           (elem "elt14" (tr "trans50" (F73))
             (tr "trans49" (F74)) (tr "trans48" (F2)))
           (elem "elt14" (tr "trans68" (F126))
             (tr "trans67" (F73)))
           (elem "elt14" (tr "trans63" (F157))
             (tr "trans62" (F122)))
           (elem "elt14" (tr "trans19" (F154))
             (tr "trans18" (F120)))
           (elem "elt14" (tr "trans57" (F2))
             (tr "trans56" (F2)))
           (elem "elt14" (tr "trans46" (F126))
             (tr "trans45" (F120)) (tr "trans44" (F125)))
           (elem "elt14" (tr "trans60" (F63))
             (tr "trans59" (F0)))))
       (abstraction F154 ()
         (choose (elem "elt9")
           (elem "elt9" (tr "trans9" (F156)))
           (elem "elt9" (tr "trans84" (F157)))))
       (abstraction F153 ()
         (choose
           (elem "elt12" (tr "trans17" (F155))
             (tr "trans16" (F63)) (tr "trans15" (F122))
             (tr "trans14" (F127)))
           (elem "elt12" (tr "trans100" (F157))
             (tr "trans99" (F154)) (tr "trans98" (F0))
             (tr "trans97" (F17)) (tr "trans96" (F18))
             (tr "trans94" (F156)) (tr "trans93" (F7)))
           (elem "elt12" (tr "trans43" (F155))
             (tr "trans42" (F122)) (tr "trans41" (F122))
             (tr "trans36" (F150)) (tr "trans35" (F127)))
           (elem "elt12" (tr "trans24" (F156))
             (tr "trans23" (F122)) (tr "trans22" (F120))
             (tr "trans21" (F105)) (tr "trans20" (F17))
             (tr "trans13" (F153)))
           (elem "elt12" (tr "trans24" (F156))
             (tr "trans90" (F120)) (tr "trans89" (F122))
             (tr "trans88" (F122)) (tr "trans83" (F154))
             (tr "trans82" (F98)))
           (elem "elt12" (tr "trans76" (F157))
             (tr "trans75" (F63)) (tr "trans74" (F122))
             (tr "trans73" (F127)) (tr "trans72" (F126))
             (tr "trans71" (F49)) (tr "trans61" (F155)))))
       (abstraction F150 ()
         (choose
           (elem "elt7" (tr "trans39" (F85))
             (tr "trans81" (F122)))
           (elem "elt7" (tr "trans113" (F0)))
           (elem "elt7" (tr "trans40" (F122))
             (tr "trans39" (F85)) (tr "trans38" (F86))
             (tr "trans37" (F18)))
           (elem "elt7" (tr "trans7" (F120)))))
       (abstraction F134 ()
         (choose
           (elem "elt0" (tr "trans109" (F157))
             (tr "trans108" (F2)) (tr "trans104" (F156))
             (tr "trans103" (F3)))
           (elem "elt0" (tr "trans8" (F154))
             (tr "trans6" (F150)) (tr "trans5" (F122))
             (tr "trans4" (F123)) (tr "trans3" (F124))
             (tr "trans2" (F125)) (tr "trans1" (F126))
             (tr "trans0" (F127)))))
       (abstraction F120 () (elem "elt8"))
       (abstraction F122 () (elem "elt6"))
       (abstraction F123 () (elem "elt5"))
       (abstraction F124 () (elem "elt4"))
       (abstraction F125 () (elem "elt3"))
       (abstraction F0 () (elem "elt21"))
       (abstraction F126 () (elem "elt2"))
       (abstraction F127 () (elem "elt1"))
       (abstraction F2 () (elem "elt20"))
       (abstraction F3 () (elem "elt28"))
       (abstraction F63 () (elem "elt13"))
       (abstraction F6 () (elem "elt27"))
       (abstraction F7 () (elem "elt32"))
       (abstraction F8 () (elem "elt33"))
       (abstraction F73 () (elem "elt26"))
       (abstraction F74 () (elem "elt25"))
       (abstraction F17 () (elem "elt15"))
       (abstraction F85 () (elem "elt24"))
       (abstraction F18 () (elem "elt22"))
       (abstraction F86 () (elem "elt23"))
       (abstraction F94 () (elem "elt19"))
       (abstraction F95 () (elem "elt18"))
       (abstraction F98 () (elem "elt11"))
       (abstraction F105 () (elem "elt16"))
       (abstraction F41 () (elem "elt31"))
       (abstraction F42 () (elem "elt29"))
       (abstraction F49 () (elem "elt30")))
     (lambda ()
       (choose (F134) (F153) (F153) (F153) (F157) (F153)
         (F157) (F153) (F134)))))

(define (grammar-sort grammar)
  (define (default-< x y)
    (= -1 (default-compare x y)))


  (define (sort-element elt)
    (let* ([recover-elt (lambda (body) `(,(car elt) ,(cadr elt) ,@body))]
           [body (cddr elt)])
      (recover-elt (sort (lambda (x y)
                           (default-< (cadr x) (cadr y)))
                           body))))

  (define (sort-nt-body nt)
    (let* ([body (abstraction->pattern nt)])
      (cond [(eq? 'choose (car body))
             (make-named-abstraction
               (abstraction->name nt)
               `(choose ,@(sort (lambda (x y)
                                  (default-< (cddr x) (cddr y)))
                                (map sort-element (cdr body))))
               '())]
            [else (make-named-abstraction
                    (abstraction->name nt)
                    (sort-element body)
                    '())])))
  (define (sort-nts nts)
    (sort 
      (lambda (nt1 nt2)
        (default-< (abstraction->pattern nt1)
                   (abstraction->pattern nt2)))
      (map sort-nt-body nts)))



  (let ([nts (program->abstractions grammar)]
        [body (program->body grammar)])
    (make-program
      (sort-nts nts)
      body)))

(pretty-print (grammar-sort grammar))
