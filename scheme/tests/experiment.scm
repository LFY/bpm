(import (dearguments)
        (abstract)
        (inverse-inline)
        (program)
        (util))
(define nnexampleprogram
  (sexpr->program '(let ()
                     (define F1
                         (lambda (V1 V2 V3 V4)
                           (node (data (color V1) (size 0.3))
                                 (node (data (color V2) (size 0.3)))
                                 (node (data (color V3) (size 0.3)))
                                 (node (data (color V4) (size 0.3))))))
                     ((uniform-draw
                       (list
                        (lambda ()
                          (node (data (color 70) (size 1))
                                (F1 37 213 207 211)))
                        (lambda ()
                          (node (data (color 43) (size 1))
                                (node (data (color 47) (size 0.1))
                                      (F1 33 220 224 207))))))))))

(define initprog '(lambda ()
                    ((uniform-draw
                      (list
                       (lambda ()
                         (node (data (color (gaussian 70 25)) (size 1))
                               (node (data (color (gaussian 37 25)) (size 0.3))
                                     (node (data (color (gaussian 213 25)) (size 0.3)))
                                     (node (data (color (gaussian 207 25)) (size 0.3)))
                                     (node (data (color (gaussian 211 25)) (size 0.3))))))
                       (lambda ()
                         (node (data (color (gaussian 43 25)) (size 1))
                               (node (data (color (gaussian 47 25)) (size 0.1))
                                     (node (data (color (gaussian 33 25)) (size 0.3))
                                           (node (data (color (gaussian 220 25)) (size 0.3)))
                                           (node (data (color (gaussian 224 25)) (size 0.3)))
                                           (node (data (color (gaussian 207 25)) (size 0.3))))))))))))


(define last (sexpr->program '(let ()
  (define F2
    (lambda (V3 V4 V5 V6)
      (node (F1 V3 0.3) (node (F1 V4 0.3))
        (node (F1 V5 0.3)) (node (F1 V6 0.3)))))
  (define F1
    (lambda (V1 V2)
      (data (color (gaussian V1 25)) (size V2))))
  (lambda ()
    (uniform-choice (F2 225.0 233.0 240 224.0)
      (F2 3e1 4e1 31 41.0) (F2 31.0 41.0 32 42.0)
      (node (F1 13.0 1)
        (node (F1 89.0 0.1)
          (node (F1 111.0 0.1)
            (node (F1 81.0 0.1)
              (node (F1 85.0 0.1)
                (node (F1 120.0 0.1)
                  (node (F1 117.0 0.1)
                    (node (F1 118.0 0.1)
                      (node (F1 51.0 0.1)
                        (node (F1 95.0 0.1)
                          (node (F1 79.0 0.1)
                            (node (F1 108.0 0.1)
                              (node (F1 131.0 0.1)
                                    (node (F1 51.0 0.1)
                                          (node (F1 95.0 0.1)
                                                (node (F1 79.0 0.1)
                                                      (node (F1 108.0 0.1)
                                                            (node (F1 131.0 0.1)
                                                                  (node (F1 130.0 0.1)
                                                                        (F2 204.0 241.0 233.0 240.0)))))))))))))))))))))))))

(pretty-print (sort-by-size (compressions last)))
;; (display-all nnexampleprogram)